from tkinter import *
import random
from PIL import Image, ImageTk

# Function to quit the program
def quit_program():
    """
    Close the main window when the "Quit" button is clicked
    """
    main_window.destroy()

# Function to print all camp details
def print_camp_details():
    """
    Print all camp details in the GUI
    """
    name_count = 0
    # Create column headings
    Label(main_window, font=("Helvetica 10 bold"), text="Row").grid(column=0, row=7)
    Label(main_window, font=("Helvetica 10 bold"), text="Customer Name").grid(column=1, row=7)
    Label(main_window, font=("Helvetica 10 bold"), text="Receipt Number").grid(column=2, row=7)
    Label(main_window, font=("Helvetica 10 bold"), text="Item Hired").grid(column=3, row=7)
    Label(main_window, font=("Helvetica 10 bold"), text="Quantity").grid(column=4, row=7)
    # Add each item in the list to its own row
    while name_count < counters['total_entries']:
        Label(main_window, text=name_count).grid(column=0, row=name_count + 8)
        Label(main_window, text=camp_details[name_count][0]).grid(column=1, row=name_count + 8)
        Label(main_window, text=camp_details[name_count][1]).grid(column=2, row=name_count + 8)
        Label(main_window, text=camp_details[name_count][2]).grid(column=3, row=name_count + 8)
        Label(main_window, text=camp_details[name_count][3]).grid(column=4, row=name_count + 8)
        name_count += 1
    counters['name_count'] = name_count

# Function to check input validity
def check_inputs():
    """
    Check if all input fields are valid before adding to the list
    """
    input_check = 0
    # Clear error messages
    for i in range(4):
        Label(main_window, text=" ").grid(column=2, row=i)
    # Check if customer name is not blank
    if len(entry_customer.get()) == 0:
        Label(main_window, fg="red", text="Required").grid(column=2, row=0)
        input_check = 1
    elif not entry_customer.get().isalpha():
        Label(main_window, fg="red", text="Enter only letters").grid(column=2, row=0)
        input_check = 1
    # Check if item hired is not blank
    if len(entry_hired.get()) == 0:
        Label(main_window, fg="red", text="Required").grid(column=2, row=1)
        input_check = 1
    elif not entry_hired.get().isalpha():
        Label(main_window, fg="red", text="Enter only letters").grid(column=2, row=0)
        input_check = 1
    # Check if quantity is not blank and between 1 and 500
    if entry_quantity.get().isdigit():
        if int(entry_quantity.get()) < 1 or int(entry_quantity.get()) > 500:
            Label(main_window, fg="red", text="1-500 only").grid(column=2, row=2)
            input_check = 1
    else:
        Label(main_window, fg="red", text="1-500 only").grid(column=2, row=2)
        input_check = 1
    # If all inputs are valid, add to the list
    if input_check == 0:
        append_name()

# Function to add a new camper to the list
def append_name():
    """
    Add a new camper to the list and clear input fields
    """
    global receipt_number
    camp_details.append([entry_customer.get(), receipt_number, entry_hired.get(), entry_quantity.get()])
    # Clear input fields
    entry_customer.delete(0, 'end')
    entry_hired.delete(0, 'end')
    entry_quantity.delete(0, 'end')
    counters['total_entries'] += 1
    receipt_number = random.randint(100000, 999999)

# Function to delete a row from the list
def delete_row():
    """
    Delete a row from the list and update the GUI
    """
    del camp_details[int(delete_item.get())]
    counters['total_entries'] -= 1
    name_count = counters['name_count']
    delete_item.delete(0, 'end')
    # Clear the last item displayed on the GUI
    for i in range(5):
        Label(main_window, text=" ").grid(column=i, row=name_count + 7)
    # Print all items in the list
    print_camp_details()

# Create the buttons and labels
def setup_buttons():
    """
    Create all the buttons and labels for the GUI
    """
    Label(main_window, text="Customer Name").grid(column=0, row=0, sticky=E)
    Label(main_window, text="Item Hired").grid(column=0, row=1, sticky=E)
    Label(main_window, text="Quantity").grid(column=0, row=2, sticky=E)
    Label(main_window, text="Row #").grid(column=3, row=2, sticky=E)
    image_3 = Image.open('pic4.png')
    image_3 = image_3.resize((30, 30))
    img_3 = ImageTk.PhotoImage(image_3)
    button3 = Button(main_window, text="Quit", bg='red', command=quit_program, width=100, image=img_3, compound='left')
    button3.image = img_3
    button3.grid(column=4, row=0, sticky=E)
    image = Image.open('pic1.png')
    image = image.resize((30, 30))
    img = ImageTk.PhotoImage(image)
    button = Button(main_window, text="Append Details", command=check_inputs, image=img, compound='left')
    button.image = img 
    button.grid(column=3, row=1)
    image_1 = Image.open('pic2.png')
    image_1 = image_1.resize((30, 30))
    img_1 = ImageTk.PhotoImage(image_1)
    button1 = Button(main_window, text="Print Details", command=print_camp_details, width=100, image=img_1, compound='left')
    button1.image = img_1
    button1.grid(column=4, row=1, sticky=E)
    image_2 = Image.open('pic3.png')
    image_2 = image_2.resize((30, 30))
    img_2 = ImageTk.PhotoImage(image_2)
    button2 = Button(main_window, text="Delete Row", command=delete_row, width=100, image=img_2, compound='left')
    button2.image = img_2
    button2.grid(column=4, row=3, sticky=E)

counters = {'total_entries': 0, 'name_count': 0} # initialize counters for number of entries and names
camp_details = [] # create an empty list to store camp details
receipt_number = random.randint(100000, 999999) # generate a random receipt number
# Start the program
def main():
    """
    Start the GUI
    """
    setup_buttons()
    main_window.title("Julies party store")
    main_window.mainloop()

# Create empty list for camp details and empty variable for entries in the list

main_window = Tk() # create the main window
bg = PhotoImage(file = "pic8.png") 
# Show image using label 
label1 = Label( main_window, image = bg) 
label1.place(x = 0 , y = 0) 
entry_customer = Entry(main_window) # create a entry box for customer name
entry_customer.grid(column=1, row=0)
entry_hired = Entry(main_window) # create a entry box for item hired
entry_hired.grid(column=1, row=1)
entry_quantity = Entry(main_window) # create a entry box for quantity
entry_quantity.grid(column=1, row=2)
delete_item = Entry(main_window) # create a entry box for deleting rows
delete_item.grid(column=3, row=3)
main()
